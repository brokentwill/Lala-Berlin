;
// Make sure Object.create is available in the browser (for our prototypal inheritance)
// Courtesy of Papa Crockford
// Note this is not entirely equal to native Object.create, but compatible with our use-case






if (typeof Object.create !== 'function') {
	Object.create = function (o) {
		function F() {} // optionally move this outside the declaration and into a closure if you need more speed.
		F.prototype = o;
		return new F();
	};
}

jQuery.noConflict();

(function($) {
	// a factory method for constructing a jQuery plugin. Courtesy of Alex Sexton:
	// http://alexsexton.com/blog/2010/02/using-inheritance-patterns-to-organize-large-jquery-applications/
	$.widget = function(widgetName, widgetObj) {
		// register the plugin to the jquery fn namespace
		$.fn[widgetName] = function(options) {
			var params = Array.prototype.slice.call(arguments, 1);
			return this.each(function(i) {
				var $this = $(this),
					instance = $this.data('widget_' + widgetName);

				// instantiate Object if it has not been done yet
				if(!instance) {
					instance = $this.data('widget_' + widgetName, new widgetObj($this, options));
				}

				// allow for calling Class methods with a string option
				if(typeof options === 'string') {
					// allow for multiple arguments to be passed to a widget's method
					instance[options].apply(instance, params);
				}
			});
		};
	};

})(jQuery);

/* **********************************************
     Begin jq.collapsible.js
********************************************** */

jQuery.noConflict();

;(function($, document, undefined) {

	var defaults = {
		activeClass: 'active'
	},

	Collapsible = function(el, options) {
		this.$el = el instanceof jQuery ? el: $(el);
		this.el = this.$el[0];
		this.opts = $.extend({}, defaults, options || {});

		this.init();
	};

	Collapsible.prototype = {

		init: function() {
			// sync with current state set in the dom
			this._active = this.$el.hasClass(this.opts.activeClass);
			this._foldHeight = this.$el.attr('data-collapse') == 'fold' ? this.el.scrollHeight : false;
		},

		show: function() {
			// stop if the element is already active
			if (this._active === true) { return; }

			this._active = true;
			this.$el.addClass(this.opts.activeClass);

			this.$el.trigger('show.collapsible');
		},

		hide: function() {
			// stop if the element isn't active
			if (this._active === false) { return; }

			this._active = false;
			this.$el.removeClass(this.opts.activeClass);

			this.$el.trigger('hide.collapsible');
		},

		toggle: function() {
			this[this._active ? 'hide': 'show']();
		},

		// alias for 'this.show()'
		open: function() { this.show(); },
		// alias for 'this.hide()'
		close: function() { this.hide(); }
	};

	$.widget('collapsible', Collapsible);

})(jQuery, document, undefined);

/* **********************************************
     Begin clickdummy.js
********************************************** */

// @codekit-prepend "modules/jq.widget.js"
// @codekit-prepend "modules/jq.collapsible.js"

jQuery.noConflict();

(function() {

	var $scrollCollapsibles = jQuery('.scroll-collapse'),
		$hoverCollapsibles = jQuery('.hover-collapse'),
		$w = jQuery(window),
		prevScroll = jQuery(window).scrollTop();

	jQuery('.scroll-collapse').collapsible();

	jQuery('.hover-collapse').on('mouseenter', function(ev) {
		if (jQuery(window).scrollTop() > 0) {
			jQuery(this).collapsible('show');
		}
	});

	jQuery('.hover-collapse').on('mouseleave', function(ev) {
		if (jQuery(window).scrollTop() > 0) {
			jQuery(this).collapsible('hide');
		}
	});

	jQuery(window).on('scroll', function(ev) {
		var currScroll = jQuery(window).scrollTop(),
			goingUp = currScroll < prevScroll;

		// scrolling up
		if (goingUp) {
			if (jQuery('#navbar02').length && jQuery(window).scrollTop() < jQuery('#navbar').height()) {
				jQuery('#navbar02').each(function(i) {
					var $this = jQuery(this),
						sticker = jQuery(this).data('plugin_sticker');

					if (sticker && !sticker.sticked) {
						return;
					}
					jQuery(this).removeClass('active');
					//jQuery(this).collapsible('show');
				});
			}
			if (jQuery('.breadcrumbs').length && jQuery(window).scrollTop() < (jQuery('.child-cate').offset().top + jQuery('.child-cate').height())) {
				jQuery('.breadcrumbs').each(function(i) {
					var $this = jQuery(this),
						sticker = jQuery(this).data('plugin_sticker');

					if (sticker && !sticker.sticked) {
						return;
					}
					jQuery(this).removeClass('active');
					//jQuery(this).collapsible('show');
				});
			}
		}

		// scrolling down
		else {
			if (jQuery('#navbar02').length && jQuery(window).scrollTop() > jQuery('#navbar').height()) {
				jQuery('#navbar02').each(function(i) {
					var $this = jQuery(this),
						sticker = jQuery(this).data('plugin_sticker');

					if (sticker && !sticker.sticked) {
						return;
					}
					jQuery(this).addClass('active');
					
					//jQuery(this).collapsible('hide');
				});
			}
			if (jQuery('.breadcrumbs').length && jQuery(window).scrollTop() > (jQuery('.child-cate').offset().top + jQuery('.child-cate').height())) {
				jQuery('.breadcrumbs').each(function(i) {
					var $this = jQuery(this),
						sticker = jQuery(this).data('plugin_sticker');

					if (sticker && !sticker.sticked) {
						return;
					}
					jQuery(this).addClass('active');
					//jQuery(this).collapsible('show');
				});
			}
		}

		prevScroll = currScroll;
	});

})();